// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    window.cc = function(arg) {
      return console.log(arg);
    };
    window.models = {};
    window.collections = {};
    /* Data Models*/

    window.models.Article = Backbone.Model.extend();
    window.collections.Articles = Backbone.Collection.extend({
      model: models.Article,
      initialize: function(opts) {
        if ((opts != null) && opts.parent_map) {
          this.parent_map = opts.parent_map;
        }
        return this;
      }
    });
    window.models.StoryMap = Backbone.Model.extend({
      defaults: function() {
        var articles;
        articles = new collections.Articles;
        articles.parent_map = this;
        return {
          markers: [],
          articles: articles
        };
      },
      initialize: function() {
        return _.bindAll(this, "formCalaisAndPlot", "getCalaisData", "getGoogleNews", "getYahooNews");
      },
      getGoogleNews: function(query, start, done) {
        var self;
        done = null;
        if (query == null) {
          return false;
        }
        self = this;
        $.get("./get_google_news.php", {
          q: query.toLowerCase(),
          start: start
        }, function(data) {
          var json;
          json = JSON.parse(data);
          if (json.responseDetails === "out of range start") {
            if (done != null) {
              done(query, 0, null);
            }
            return false;
          }
          _.each(json.responseData.results, function(story) {
            return self.getCalaisData(story, story.titleNoFormatting + story.content, self.formCalaisAndPlot);
          });
          return self.getGoogleNews(query, start + 8, done);
        });
        return true;
      },
      formCalaisAndPlot: function(fullstory, calaisjson, i) {
        var calaisObj;
        calaisObj = _.extend({}, fullstory);
        calaisObj.latitude = calaisjson[i].resolutions[0].latitude;
        calaisObj.longitude = calaisjson[i].resolutions[0].longitude;
        calaisObj.date = new Date(calaisjson.doc.info.docDate);
        this.get("articles").add(new models.Article(calaisObj));
        this.get("map").plotStory(calaisObj);
        return this.trigger("updateDateRange");
      },
      getYahooNews: function(query, start, done) {
        var self;
        cc("Getting Yahoo " + query + " " + start);
        if (query == null) {
          return false;
        }
        self = this;
        return $.get("./get_yahoo_news.php", {
          q: query.toLowerCase(),
          start: start
        }, function(data) {
          var response, stories;
          response = JSON.parse(data);
          cc(response.bossresponse);
          if ((response != null) && (response.bossresponse != null) && (response.bossresponse.news != null)) {
            stories = response.bossresponse.news.results;
          } else if (done != null) {
            done(query, 0, null);
          }
          _.each(stories, function(story) {
            return self.getCalaisData(story, story.title + story.abstract, self.formCalaisAndPlot);
          });
          cc(start);
          if (start <= 1000) {
            return self.getYahooNews(query, start + 50, done);
          } else if (done != null) {
            return done(query, 0, null);
          }
        });
      },
      getCalaisData: function(story, story_string, callback) {
        var self;
        self = this;
        console.log("getting data");
        $.get("./calais.php", {
          content: story_string
        }, function(data) {
          var calaisjson, i;
          calaisjson = JSON.parse(data);
          if (calaisjson == null) {
            return;
          }
          for (i in calaisjson) {
            if (calaisjson[i].hasOwnProperty("resolutions")) {
              callback(story, calaisjson, i);
            }
          }
        });
        return this;
      },
      filterByDate: function(lodate, hidate) {
        var outofbounds;
        outofbounds = _.reject(this.get("articles").models, function(article) {
          var date;
          date = article.get("date").getTime();
          cc(date);
          return date <= hidate && date >= lodate;
        });
        return cc(outofbounds);
      }
    });
    window.collections.Maps = Backbone.Collection.extend({
      url: 'maps.php',
      model: models.StoryMap
    });
    window.AllMaps = new collections.Maps();
    window.AllMaps.fetch({
      success: function(collection, response) {
        if (collection.length === 0) {
          return collection.add(new models.StoryMap());
        } else {
          return cc("Now we want to go to the route for all saved maps");
        }
      },
      error: function(collection, response) {}
    });
    /* Router*/

    window.Workspace = Backbone.Router.extend({
      routes: {
        "saved": "saved",
        "settings": "settings",
        "play": "play",
        "map/:index/(:subview)": "goto"
      },
      goto: function() {
        return cc(arguments);
      },
      saved: function() {
        cc("showing all maps");
        return cc(Backbone.history.fragment);
      },
      settings: function() {
        return cc("showing settings");
      },
      play: function() {
        return cc("playing timeline animation");
      }
    });
    window.app = new window.Workspace();
    return Backbone.history.start();
  });

}).call(this);
