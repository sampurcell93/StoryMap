// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    window.cc = function(arg) {
      return console.log(arg);
    };
    window.models = {};
    window.collections = {};
    /* Data Models*/

    window.models.Article = Backbone.Model.extend();
    window.collections.Articles = Backbone.Collection.extend({
      model: models.Article,
      initialize: function(opts) {
        if ((opts != null) && opts.parent_map) {
          this.parent_map = opts.parent_map;
        }
        return this;
      }
    });
    window.models.StoryMap = Backbone.Model.extend({
      defaults: function() {
        return {
          markers: [],
          articles: new collections.Articles({
            parent_map: this
          })
        };
      },
      getGoogleNews: function(val, start) {
        var self;
        if (val == null) {
          return false;
        }
        self = this;
        $.get("./getnews.php", {
          q: val.toLowerCase(),
          start: start
        }, function(data) {
          var i, json, _i, _ref, _results;
          json = JSON.parse(data);
          cc(json);
          if (json.responseDetails === "out of range start") {
            return false;
          }
          _results = [];
          for (i = _i = 0, _ref = json.responseData.results.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push(self.getCalaisData(json.responseData.results[i]));
          }
          return _results;
        });
        return true;
      },
      getCalaisData: function(content) {
        var context, self;
        self = this;
        console.log("getting data");
        context = content.titleNoFormatting + content.content;
        $.get("./calais.php", {
          content: context
        }, function(data) {
          var el, json;
          json = JSON.parse(data);
          if (json == null) {
            return;
          }
          console.log(json.doc.info.docDate);
          for (el in json) {
            if (json[el].hasOwnProperty("resolutions")) {
              content.latitude = json[el].resolutions[0].latitude;
              content.longitude = json[el].resolutions[0].longitude;
              self.get("articles").push(content);
              self.get("map").plotStory(content);
            }
          }
        });
        return content;
      }
    });
    window.collections.Maps = Backbone.Collection.extend({
      url: 'maps.php',
      model: models.StoryMap
    });
    window.AllMaps = new collections.Maps();
    window.AllMaps.fetch({
      success: function(collection, response) {
        if (collection.length === 0) {
          return collection.add(new models.StoryMap());
        } else {
          return cc("Now we want to go to the route for all saved maps");
        }
      },
      error: function(collection, response) {
        return cc(response);
      }
    });
    /* Router*/

    window.Workspace = Backbone.Router.extend({
      routes: {
        "saved": "saved",
        "settings": "settings",
        "play": "play",
        "map/:index/(:subview)": "goto"
      },
      goto: function() {
        return cc(arguments);
      },
      saved: function() {
        cc("showing all maps");
        return cc(Backbone.history.fragment);
      },
      settings: function() {
        return cc("showing settings");
      },
      play: function() {
        return cc("playing timeline animation");
      }
    });
    window.app = new window.Workspace();
    return Backbone.history.start();
  });

}).call(this);
