// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var AllMaps, AllMapsView;
    window.views = {};
    AllMaps = window.AllMaps;
    window.views.MapItem = Backbone.View.extend({
      tagName: 'section',
      template: $("#map-instance").html(),
      initialize: function() {
        var self;
        _.bindAll(this, "render", "afterAppend", "toggleMarkers");
        self = this;
        this.model.instance = this;
        return this.listenTo(this.model, {
          "loading": this.createLoadingOverlay
        });
      },
      render: function() {
        this.$el.html(_.template(this.template, this.model.toJSON()));
        return this;
      },
      afterAppend: function() {
        var self;
        self = this;
        this.model.set("map", self.mapObj = new window.GoogleMap(this.model));
        this.articleList = new views.ArticleList({
          collection: this.model.get("articles")
        });
        this.articleList.render();
        this.timeline = new views.Timeline({
          collection: this.model.get("articles"),
          map: this
        });
        return this;
      },
      toggleMarkers: function(markers) {
        var self;
        self = this;
        _.each(markers.outrange, function(outlier) {
          return outlier.setMap(null);
        });
        _.each(markers.inrange, function(inlier) {
          if (inlier.getMap() == null) {
            return inlier.setMap(self.mapObj.map);
          }
        });
        return this;
      },
      events: {
        "keydown .news-search": function(e) {
          var key;
          key = e.keyCode || e.which;
          if (key === 13) {
            return this.$(".go").trigger("click");
          }
        },
        "click .go": function() {
          var self;
          self = this;
          this.model.trigger("loading");
          return this.model.getGoogleNews(this.$(".news-search").val(), 0, function(query, start, done) {
            return self.model.getYahooNews(query, start, function(query, start, done) {
              window.destroyModal();
              return self.timeline.render();
            });
          });
        },
        "click [data-route]": function(e) {
          var $t, current_route, route;
          $t = $(e.currentTarget);
          route = $t.data("route");
          current_route = Backbone.history.fragment;
          return window.app.navigate(route, {
            trigger: true
          });
        }
      },
      createLoadingOverlay: function() {
        var content, loader;
        loader = $("<img/>").addClass("loader").attr("src", "assets/images/loader.gif");
        content = _.template($("#main-loading-message").html(), {});
        window.launchModal($("<div/>").append(content).append(loader), {
          close: false
        });
        return this;
      }
    });
    window.views.MapInstanceList = Backbone.View.extend({
      el: ".map-instance-list",
      initialize: function() {
        this.listenTo(this.collection, {
          add: this.addInstance
        });
        return this;
      },
      addInstance: function(model) {
        var instance, item;
        item = new window.views.MapItem({
          model: model
        });
        instance = $(item.render().el);
        instance.appendTo(this.$el);
        item.afterAppend();
        instance.siblings().hide();
        return this;
      }
    });
    window.views.MapMarker = Backbone.View.extend({
      tagName: 'div',
      template: $("#storymarker").html(),
      render: function() {
        var pt, xOff, yOff;
        this.$el.html(_.template(this.template, this.model.toJSON()));
        this.xoff = xOff = Math.random() * 0.1;
        this.yoff = yOff = Math.random() * 0.1;
        pt = new google.maps.LatLng(parseInt(this.model.get("latitude")) + xOff, parseInt(this.model.get("longitude")) + yOff);
        this.marker = new google.maps.Marker({
          position: pt,
          animation: google.maps.Animation.DROP,
          title: this.model.get("title")
        });
        return this;
      }
    });
    window.views.Article = Backbone.View.extend({
      template: $("#article-item").html(),
      tagName: 'li',
      initialize: function() {
        return _.bindAll(this, "render");
      },
      render: function() {
        this.$el.html(_.template(this.template, this.model.toJSON()));
        return this;
      },
      events: {
        "click": function() {
          return cc(this.model);
        }
      }
    });
    window.views.ArticleList = Backbone.View.extend({
      el: '.all-articles',
      events: {
        "click": function() {
          return cc(this.collection);
        }
      },
      initialize: function() {
        var self;
        self = this;
        cc(this.$el);
        _.bindAll(this, "render", "appendChild");
        return this.listenTo(this.collection, "add", function(model) {
          return self.appendChild(model);
        });
      },
      appendChild: function(model) {
        var view;
        view = new views.Article({
          model: model
        });
        this.$el.append(view.render().el);
        return this;
      },
      render: function() {
        var self;
        console.log("Rendernd model list");
        self = this;
        this.$el.empty();
        _.each(this.collection.models, function(model) {
          return self.appendChild(model);
        });
        return this;
      }
    });
    window.views.Timeline = Backbone.View.extend({
      el: 'footer',
      speeds: {
        forward: 32,
        back: 32
      },
      dir: "forward",
      min: new Date,
      max: new Date(0),
      initialize: function() {
        var self, update_val;
        self = this;
        this.map = this.options.map;
        _.bindAll(this, "updateMinMax", "changeValue", "updateHandles", "play");
        this.listenTo(this.collection, "add", function(model) {
          self.updateMinMax(model);
          return self.updateHandles();
        });
        update_val = function(e, ui) {
          var cleaned, display, handle, pos, range;
          handle = $(ui.handle);
          pos = handle.index() - 1;
          range = ui.values;
          cleaned = new Date(range[pos]).cleanFormat();
          display = $("<div/>").addClass("handle-display-value").text(cleaned);
          handle.find("div").remove().end().append(display);
          return self.map.toggleMarkers(self.collection.filterByDate(ui.values[0], ui.values[1]));
        };
        this.$timeline = this.$(".timeline-slider");
        this.$timeline.slider({
          range: true,
          values: [0, 100],
          step: 10000,
          slide: update_val,
          change: update_val
        });
        return this;
      },
      render: function() {
        var self;
        self = this;
        _.each(this.collection.models, function(article) {
          if ((article.get("latitude") != null) && (article.get("longitude") != null)) {
            return self.addMarker(article);
          }
        });
        return this;
      },
      addMarker: function(model) {
        var pos, view;
        cc("appending a RED MARKR ONTO TIMELINE");
        cc(model.get("date").getTime());
        pos = model.get("date").getTime();
        view = new views.TimelineMarker({
          model: model,
          left: pos / this.max
        });
        this.$(".slider-wrap").append(view.render().el);
        cc(view.render().el);
        return this;
      },
      play: function() {
        var $timeline, dir, hi, inc, lo, values;
        $timeline = this.$timeline;
        values = $timeline.slider("values");
        lo = values[0];
        hi = values[1];
        this.isPlaying = true;
        dir = this.dir === "forward" ? 1 : -1;
        inc = dir * Math.ceil(Math.abs((hi - lo) / 300));
        cc(this.speeds[this.dir]);
        this.changeValue(lo, hi, inc, function(lo, hi) {
          return lo <= hi;
        });
        return this;
      },
      stop: function() {
        this.isPlaying = false;
        this.$(".js-pause-timeline").trigger("switch");
        return this;
      },
      changeValue: function(lo, hi, increment, comparator) {
        var self;
        self = this;
        window.setTimeout(function() {
          var newlo;
          if (comparator(lo, hi) === true && self.isPlaying === true) {
            newlo = lo + increment;
            self.$timeline.slider("values", 1, newlo);
            return self.changeValue(newlo, hi, increment, comparator);
          } else {
            return self.stop();
          }
        }, this.speeds[this.dir]);
        return this;
      },
      updateMinMax: function(model) {
        var date;
        if (model == null) {
          return this;
        }
        cc("updaing min max");
        date = model.get("date");
        if (date < this.min) {
          this.min = date;
        } else if (date > this.max) {
          this.max = date;
        } else {
          return this;
        }
        return this;
      },
      updateHandles: function() {
        var $timeline, handles, maxdate, mindate;
        $timeline = this.$timeline;
        handles = $timeline.find(".ui-slider-handle");
        handles.first().data("display-date", this.max.cleanFormat());
        handles.last().data("display-date", this.min.cleanFormat());
        mindate = this.min.getTime();
        maxdate = this.max.getTime();
        $timeline.slider("values", 0, mindate);
        $timeline.slider("values", 1, maxdate);
        $timeline.slider("option", {
          min: mindate,
          max: maxdate
        });
        return this;
      },
      setSpeed: function(dir) {
        var rel, speed;
        rel = Math.pow(2, 5);
        speed = this.speeds[dir];
        if (speed > 1) {
          speed /= 2;
        } else {
          speed = 32;
        }
        this.speeds[dir] = speed;
        this.dir = dir;
        return rel / speed;
      },
      renderSpeed: function(e) {
        var $t, speed;
        if (e != null) {
          $t = $(e.currentTarget);
          speed = this.setSpeed($t.attr("dir" || "forward"));
          $t.attr("speed", speed + "x");
          return $t.addClass("selected").siblings(".js-speed-control").removeClass("selected");
        }
      },
      events: {
        "click .js-play-timeline": function(e) {
          $(e.currentTarget).removeClass("js-play-timeline").addClass("js-pause-timeline");
          if (!this.isPlaying) {
            return this.play();
          }
        },
        "click .js-pause-timeline": function(e) {
          $(e.currentTarget).removeClass("js-pause-timeline").addClass("js-play-timeline");
          return this.stop();
        },
        "switch .js-pause-timeline": function(e) {
          return $(e.currentTarget).removeClass("js-pause-timeline").addClass("js-play-timeline");
        },
        "click .js-fast-forward": "renderSpeed",
        "click .js-rewind": "renderSpeed",
        "mouseover .timeline-controls li": function(e) {
          var $t;
          return $t = $(e.currentTarget);
        }
      }
    });
    window.views.TimelineMarker = Backbone.View.extend({
      className: 'timeline-marker',
      render: function() {
        var num;
        num = this.options.left || (Math.random() * 100);
        console.log("putting marker at " + num);
        this.$el.css('left', (num * 100) + "%");
        return this;
      }
    });
    return AllMapsView = new window.views.MapInstanceList({
      collection: AllMaps
    });
  });

}).call(this);
