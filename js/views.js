// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var AllMaps, AllMapsView;
    window.views = {};
    AllMaps = window.AllMaps;
    window.views.MapItem = Backbone.View.extend({
      tagName: 'section',
      template: $("#map-instance").html(),
      initialize: function() {
        _.bindAll(this, "render", "afterAppend", "updateDateRange", "incrementValue");
        this.model.instance = this;
        this.listenTo(this.model, {
          "updateDateRange": this.updateDateRange,
          "loading": this.createLoadingOverlay
        });
        return this.updateDateRange();
      },
      render: function() {
        this.$el.html(_.template(this.template, this.model.toJSON()));
        return this;
      },
      afterAppend: function() {
        var self, update_val;
        self = this;
        this.model.set("map", new window.GoogleMap(this.model));
        update_val = function(e, ui) {
          var cleaned, display, handle, pos, range;
          handle = $(ui.handle);
          pos = handle.index() - 1;
          range = ui.values;
          cleaned = new Date(range[pos]).cleanFormat();
          display = $("<div/>").addClass("handle-display-value").text(cleaned);
          handle.find("div").remove().end().append(display);
          return self.model.filterByDate(ui.values[0], ui.values[1]);
        };
        this.$timeline = this.$(".timeline-slider");
        return this.$timeline.slider({
          range: true,
          values: [0, 100],
          step: 10000,
          slide: update_val,
          change: update_val
        });
      },
      updateDateRange: function() {
        var $timeline, articles, handles, max, maxdate, min, mindate, oneday;
        cc("updating date range");
        articles = this.model.get("articles");
        if (articles.length > 0) {
          min = articles.at(0);
          max = articles.last();
          _.each(articles.models, function(article) {
            var date;
            date = article.get("date");
            if (date < min.get("date")) {
              return min = article;
            } else if (date > max.get("date")) {
              return max = article;
            }
          });
          mindate = min.get("date");
          maxdate = max.get("date");
          $timeline = this.$timeline;
          handles = $timeline.find(".ui-slider-handle");
          handles.first().data("display-date", mindate.cleanFormat());
          handles.last().data("display-date", maxdate.cleanFormat());
          mindate = mindate.getTime();
          maxdate = maxdate.getTime();
          oneday = 86400000;
          $timeline.slider("values", 0, mindate);
          $timeline.slider("values", 1, maxdate);
          return $timeline.slider("option", {
            min: mindate,
            max: maxdate
          });
        }
      },
      events: {
        "click .go": function() {
          var self;
          self = this;
          this.model.trigger("loading");
          return this.model.getGoogleNews(this.$(".news-search").val(), 0, function(query, start, done) {
            return self.model.getYahooNews(query, start, function(query, start, done) {
              return window.destroyModal();
            });
          });
        },
        "click [data-route]": function(e) {
          var $t, current_route, route;
          $t = $(e.currentTarget);
          route = $t.data("route");
          current_route = Backbone.history.fragment;
          return window.app.navigate(route, {
            trigger: true
          });
        },
        "click .js-play-timeline": function(e) {
          if (this.playingTimeline !== true) {
            return this.playTimeline();
          }
        }
      },
      playTimeline: function() {
        var $timeline, hi, increment, lo, values;
        $timeline = this.$timeline;
        values = $timeline.slider("values");
        lo = values[0];
        hi = values[1];
        this.playingTimeline = true;
        increment = Math.floor(Math.abs((hi - lo) / 1000));
        return this.incrementValue(values[0], values[1] + 86400000, increment);
      },
      incrementValue: function(lo, hi, increment) {
        var self;
        self = this;
        return window.setTimeout(function() {
          var newlo;
          if (lo <= hi) {
            cc("lo: " + lo);
            cc("hi: " + hi);
            newlo = lo + increment;
            self.$timeline.slider("values", 1, newlo);
            return self.incrementValue(newlo, hi, increment);
          } else {
            return self.playingTimeline = false;
          }
        }, 4);
      },
      createLoadingOverlay: function() {
        var content, loader;
        loader = $("<img/>").addClass("loader").attr("src", "assets/images/loader.gif");
        content = _.template($("#main-loading-message").html(), {});
        return window.launchModal($("<div/>").append(content).append(loader), {
          close: false
        });
      }
    });
    window.views.MapInstanceList = Backbone.View.extend({
      el: ".map-instance-list",
      initialize: function() {
        this.listenTo(this.collection, {
          add: this.addInstance
        });
        return this;
      },
      addInstance: function(model) {
        var instance, item;
        item = new window.views.MapItem({
          model: model
        });
        instance = $(item.render().el);
        instance.appendTo(this.$el);
        item.afterAppend();
        instance.siblings().hide();
        return this;
      }
    });
    AllMapsView = new window.views.MapInstanceList({
      collection: AllMaps
    });
    return window.app.navigate("/map/0", true);
  });

}).call(this);
