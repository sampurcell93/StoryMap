// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var blueIcon, redIcon;
    blueIcon = "/static/images/bluepoi.png";
    redIcon = "/static/images/redpoi.png";
    window.views = {};
    window.views.MapItem = Backbone.View.extend({
      el: 'section.map',
      typeahead: false,
      url: function() {
        return '/favorite?user_id=' + this.model.user.id + "&query_id=" + this.currQuery.id;
      },
      initialize: function() {
        var $searchbar, Underscore, self;
        _.bindAll(this, "render", "toggleMarkers", "search");
        self = this;
        this.model.instance = this;
        this.on({
          "loading": this.createLoadingOverlay,
          "doneloading": function() {
            return window.destroyModal();
          }
        });
        this.listenTo(this.model, "change:title", function(model, title) {
          return self.$(".js-news-search").typeahead('setQuery', title);
        });
        window.mapObj = self.mapObj = this.model.get("map");
        $searchbar = self.$(".js-news-search");
        if (!this.typeahead) {
          Underscore = {
            compile: function(template) {
              var compiled;
              compiled = _.template(template);
              return {
                render: function(context) {
                  return compiled(context);
                }
              };
            }
          };
          $searchbar.typeahead([
            {
              name: 'Queries',
              template: $("#existing-query-item").html(),
              local: window.existingQueries.models,
              engine: Underscore,
              limit: 1000
            }
          ]);
          this.typeahead = true;
        }
        this.storyList = new views.StoryList({
          collection: this.model.get("stories"),
          map: this
        });
        this.timeline = new views.Timeline({
          collection: this.model.get("stories"),
          map: this
        });
        this.render();
        return this;
      },
      render: function() {
        this.$(".js-news-search").typeahead('setQuery', this.model.get("title") || "");
        this.renderComponents();
        return this.plotAll();
      },
      plotAll: function() {
        _.each(this.model.get("stories").models, function(story) {
          return story.plot();
        });
        return this;
      },
      renderComponents: function() {
        if (this.storyList != null) {
          this.storyList.render();
        }
        return this;
      },
      toggleMarkers: function(markers) {
        var self;
        self = this;
        _.each(markers.outrange, function(outlier) {
          return outlier.setMap(null);
        });
        _.each(markers.inrange, function(inlier) {
          if (inlier.getMap() == null) {
            return inlier.setMap(self.mapObj.map);
          }
        });
        return this;
      },
      cacheQuery: function(query) {
        existingQueries._byTitle[query.get("title")] = query;
        return this;
      },
      search: function(query) {
        var queryobj, self;
        this.$(".icon-in").css("visibility", "visible");
        self = this;
        queryobj = new models.Query({
          title: query
        });
        this.model = queryobj;
        this.storyList.collection = this.timeline.collection = queryobj.get("stories");
        this.storyList.bindListeners();
        this.cacheQuery(queryobj);
        this.trigger("loading");
        return queryobj.exists((function(query) {
          return queryobj.getGoogleNews(query, 0, function() {
            window.destroyModal();
            console.log(queryobj);
            return _.each(queryobj.get("stories").models, function(story) {
              return story.getCalaisData();
            });
          });
        }), (function(model) {
          _.extend(queryobj.attributes, model.attributes);
          window.existingQueries.add(queryobj);
          return self.loadQuery(queryobj);
        }));
      },
      loadQuery: function(query) {
        var model, self;
        model = query || this.model;
        self = this;
        return model.fetch({
          success: function(model, resp, options) {
            var formatted;
            window.mapObj.clear();
            formatted = model.attributes;
            formatted.stories = new collections.Stories(resp["stories"].models);
            self.model = query;
            self.storyList.collection = self.timeline.collection = formatted.stories;
            self.render();
            return destroyModal();
          },
          error: function() {}
        });
      },
      events: {
        "keydown .js-news-search": function(e) {
          var key, val;
          key = e.keyCode || e.which;
          val = $(e.currentTarget).val();
          if (key === 13) {
            return this.search(val);
          }
        },
        "click .go": function(e) {
          return this.search(this.$(".js-news-search").val());
        },
        "click [data-route]": function(e) {
          var $t, current_route, route;
          $t = $(e.currentTarget);
          route = $t.data("route");
          current_route = Backbone.history.fragment;
          return window.app.navigate(route, {
            trigger: true
          });
        },
        "click .js-save-query": function(e) {
          var stories, toSave;
          toSave = this.model;
          console.log(toSave);
          stories = toSave.get("stories");
          return toSave.save(null, {
            success: function(resp, b, c) {
              toSave.favorite();
              toSave.set("stories", stories);
              _.each(stories.models, function(story) {
                story.set("query_id", toSave.id);
                return story.save(null, {
                  success: function(model, resp) {
                    return cc(resp);
                  },
                  error: function(model, resp) {
                    return cc(resp);
                  }
                });
              });
              return {
                error: function() {
                  return cc("YOLo");
                }
              };
            }
          });
        }
      },
      createLoadingOverlay: function() {
        var content;
        content = _.template($("#main-loading-message").html(), {});
        window.launchModal($("<div/>").append(content), {
          close: false
        });
        return this;
      }
    });
    window.views.MapMarker = Backbone.View.extend({
      tagName: 'div',
      template: $("#storymarker").html(),
      initialize: function() {
        this.map = this.options.map || window.map;
        return this.listenTo(this.model, {
          "hide": function() {
            if (this.marker != null) {
              return this.marker.setMap(null);
            }
          },
          "show": function() {
            if (this.marker != null) {
              return this.marker.setMap(this.map);
            }
          },
          "highlight": function() {
            if (this.marker != null) {
              return this.marker.setIcon(blueIcon);
            }
          },
          "unhighlight": function() {
            if (this.marker != null) {
              return this.marker.setIcon(redIcon);
            }
          }
        });
      },
      render: function() {
        var pt, xOff, yOff;
        this.$el.html(_.template(this.template, this.model.toJSON()));
        this.xoff = xOff = Math.random() * 0.1;
        this.yoff = yOff = Math.random() * 0.1;
        pt = new google.maps.LatLng(parseInt(this.model.get("lat")) + xOff, parseInt(this.model.get("lng")) + yOff);
        console.log(pt);
        this.marker = new google.maps.Marker({
          position: pt,
          animation: google.maps.Animation.DROP,
          title: this.model.get("title"),
          icon: redIcon,
          map: window.mapObj.map
        });
        return this;
      }
    });
    window.views.StoryListItem = Backbone.View.extend({
      template: $("#article-item").html(),
      tagName: 'li',
      initialize: function() {
        var self;
        _.bindAll(this, "render");
        self = this;
        return this.listenTo(this.model, {
          "hide": function() {
            console.log("hiding");
            return this.$el.hide();
          },
          "show": function() {
            console.log("showing");
            return this.$el.show();
          },
          "loading": function() {
            cc("loading");
            return self.$el.prepend("<img class='loader' src='static/images/loader.gif' />");
          },
          "change:hasLocation": function() {
            cc("setting loaction");
            return this.$el.addClass("has-location");
          }
        });
      },
      render: function() {
        this.$el.append(_.template(this.template, this.model.toJSON()));
        return this;
      },
      events: {
        "click": function() {
          return cc(this.model.toJSON());
        },
        "mouseover": function() {
          return this.model.trigger("highlight");
        },
        "mouseout": function() {
          return this.model.trigger("unhighlight");
        }
      }
    });
    window.views.StoryList = Backbone.View.extend({
      el: '.all-articles',
      list: 'ol.article-list',
      sortopts: '.sort-options-list',
      hidden: false,
      events: {
        "click": function() {
          return cc(this.collection);
        }
      },
      initialize: function() {
        var self;
        self = this;
        this.map = this.options.map;
        _.bindAll(this, "render", "appendChild", "toggle", "filter");
        return this.bindListeners();
      },
      bindListeners: function() {
        var self;
        console.log("binding listeners");
        console.log(this.collection);
        self = this;
        return this.listenTo(this.collection, "add", function(model) {
          return self.appendChild(model);
        });
      },
      appendChild: function(model) {
        var view;
        view = new views.StoryListItem({
          model: model
        });
        this.$(this.list).find(".placeholder").remove().end().append(view.render().el);
        return this;
      },
      render: function() {
        var self;
        self = this;
        this.$(this.list).children().not(".placeholder").remove();
        console.log(this.collection);
        _.each(this.collection.models, function(model) {
          return self.appendChild(model);
        });
        return this;
      },
      filter: function(query) {
        return _.each(this.collection.models, function(story) {
          var str;
          str = (story.toJSON().title + story.toJSON().content).toLowerCase();
          if (str.indexOf(query.toLowerCase()) === -1) {
            return story.trigger("hide");
          } else {
            return story.trigger("show");
          }
        });
      },
      toggle: function() {
        var map, smoothRender, startTime;
        cc("Toggling");
        this.hidden = !this.hidden;
        this.$el.toggleClass("away");
        map = this.map.mapObj.map;
        startTime = new Date().getTime();
        return smoothRender = setInterval(function() {
          var timeFromStart;
          timeFromStart = new Date().getTime() - startTime;
          google.maps.event.trigger(map, 'resize');
          map.setZoom(map.getZoom());
          if (timeFromStart >= 450) {
            return clearInterval(smoothRender);
          }
        }, 1);
      },
      events: {
        "keyup .js-filter-articles": function(e) {
          var $t, val;
          val = ($t = $(e.currentTarget)).val();
          return this.filter(val);
        },
        "click .js-toggle-view": "toggle",
        "click .placeholder": function() {
          return this.map.$(".js-news-search").focus();
        },
        'click .js-sort-options': function(e) {
          this.$(this.sortopts).toggle("fast");
          e.stopPropagation();
          return e.preventDefault();
        },
        'click .js-filter-param': function(e) {
          var $t, show;
          $t = $(e.currentTarget);
          show = $t.data("filtered");
          if (typeof show === "undefined") {
            show = true;
          }
          $t.data("filtered", !show);
          return cc($t.data("filtered"));
        },
        'click .js-sort-param': function(e) {
          var $siblings, $t;
          $t = $(e.currentTarget);
          return $siblings = $t.siblings(".js-sort-param");
        }
      }
    });
    window.views.Timeline = Backbone.View.extend({
      el: 'footer',
      speeds: {
        forward: 32,
        back: 32
      },
      dir: "forward",
      initialize: function() {
        var self, update_val;
        self = this;
        this.map = this.options.map;
        _.bindAll(this, "render", "addMarker", "changeValue", "play", "stop", "updateHandles");
        update_val = function(e, ui) {
          var cleaned, display, handle, pos, range;
          handle = $(ui.handle);
          pos = handle.index() - 1;
          range = ui.values;
          cleaned = new Date(range[pos]).cleanFormat();
          display = $("<div/>").addClass("handle-display-value").text(cleaned);
          handle.find("div").remove().end().append(display);
          return self.map.toggleMarkers(self.collection.filterByDate(ui.values[0], ui.values[1]));
        };
        this.$timeline = this.$(".timeline-slider");
        this.$timeline.slider({
          range: true,
          values: [0, 100],
          step: 10000,
          slide: update_val,
          change: update_val
        });
        return this;
      },
      render: function() {
        var self;
        self = this;
        _.each(this.collection.models, function(story) {
          if ((story.get("lat") != null) && (story.get("lng") != null)) {
            return self.addMarker(story);
          }
        });
        return this;
      },
      addMarker: function(model) {
        var pos, view;
        cc("appending a RED MARKR ONTO TIMELINE");
        pos = model.get("date").getTime();
        view = new views.TimelineMarker({
          model: model,
          left: pos / this.max
        });
        this.$(".slider-wrap").append(view.render().el);
        return this;
      },
      play: function() {
        var dir, hi, inc, lo, values;
        this.updateHandles();
        values = this.$timeline.slider("values");
        lo = values[0];
        hi = values[1];
        console.log(values);
        this.isPlaying = true;
        dir = this.dir === "forward" ? 1 : 1;
        inc = dir * Math.ceil(Math.abs((hi - lo) / 300));
        console.log(inc);
        this.changeValue(lo, hi, inc, function(locmp, hicmp) {
          return locmp <= hicmp;
        });
        return this;
      },
      stop: function() {
        this.isPlaying = false;
        this.$(".js-pause-timeline").trigger("switch");
        return this;
      },
      changeValue: function(lo, hi, increment, comparator) {
        var self;
        self = this;
        window.setTimeout(function() {
          var newlo;
          if (comparator(lo, hi) === true && self.isPlaying === true) {
            newlo = lo + increment;
            self.$timeline.slider("values", 1, newlo);
            return self.changeValue(newlo, hi, increment, comparator);
          } else {
            return self.stop();
          }
        }, this.speeds[this.dir]);
        return this;
      },
      updateHandles: function() {
        var $timeline, handles, max, maxdate, min, mindate, prevcomparator;
        if ((this.max != null) && (this.min != null)) {
          return;
        }
        prevcomparator = this.collection.comparator;
        this.collection.comparator = function(model) {
          return model.get("date");
        };
        this.collection.sort();
        this.min = min = this.collection.first().get("date");
        this.max = max = this.collection.last().get("date");
        mindate = parseInt(min.getTime());
        maxdate = parseInt(max.getTime());
        $timeline = this.$timeline;
        handles = $timeline.find(".ui-slider-handle");
        handles.first().data("display-date", min.cleanFormat());
        handles.last().data("display-date", max.cleanFormat());
        $timeline.slider("option", {
          min: mindate,
          max: maxdate
        });
        $timeline.slider("values", 0, mindate);
        $timeline.slider("values", 1, maxdate);
        return this;
      },
      setSpeed: function(dir) {
        var rel, speed;
        rel = Math.pow(2, 5);
        speed = this.speeds[dir];
        if (speed > 1) {
          speed /= 2;
        } else {
          speed = 32;
        }
        this.speeds[dir] = speed;
        this.dir = dir;
        return rel / speed;
      },
      renderSpeed: function(e) {
        var $t, speed;
        if (e != null) {
          $t = $(e.currentTarget);
          speed = this.setSpeed($t.attr("dir" || "forward"));
          $t.attr("speed", speed + "x");
          return $t.addClass("selected").siblings(".js-speed-control").removeClass("selected");
        }
      },
      events: {
        "click .js-play-timeline": function(e) {
          $(e.currentTarget).removeClass("js-play-timeline").addClass("js-pause-timeline");
          if (!this.isPlaying) {
            return this.play();
          }
        },
        "click .js-pause-timeline": function(e) {
          $(e.currentTarget).removeClass("js-pause-timeline").addClass("js-play-timeline");
          return this.stop();
        },
        "switch .js-pause-timeline": function(e) {
          return $(e.currentTarget).removeClass("js-pause-timeline").addClass("js-play-timeline");
        },
        "click .js-fast-forward": "renderSpeed",
        "click .js-rewind": "renderSpeed",
        "mouseover .timeline-controls li": function(e) {
          var $t;
          return $t = $(e.currentTarget);
        }
      }
    });
    window.views.TimelineMarker = Backbone.View.extend({
      className: 'timeline-marker',
      render: function() {
        var num;
        num = this.options.left || (Math.random() * 100);
        console.log("putting marker at " + num);
        this.$el.css('left', (num * 100) + "%");
        return this;
      }
    });
    (function() {
      var i, randClasses;
      i = 0;
      randClasses = ["blueribbon", "green", "orangestuff", "pink", "purple", "tendrils"];
      return window.views.QueryThumb = Backbone.View.extend({
        tagName: 'li',
        template: $("#query-thumb").html(),
        searchComplete: function() {
          return console.log(arguments);
        },
        render: function() {
          this.$el.html(_.template(this.template, this.model.toJSON())).addClass(randClasses[i++ % 6]);
          return this;
        },
        events: {
          "click .js-load-map": function() {
            return window.app.navigate("/query/" + this.model.get("title"), true);
          }
        }
      });
    })();
    return window.views.QueryThumbList = Backbone.View.extend({
      tagName: 'ul',
      className: 'query-thumb-list',
      template: $("#query-list-help").html(),
      appendChild: function(model) {
        var thumb;
        thumb = new views.QueryThumb({
          model: model
        });
        this.$el.append(thumb.render().el);
        return this;
      },
      render: function() {
        var self;
        self = this;
        this.$el.html(_.template(this.template, {}));
        _.each(this.collection.models, function(query) {
          return self.appendChild(query);
        });
        return this;
      }
    });
  });

}).call(this);
