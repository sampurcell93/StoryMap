// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    window.models = {};
    window.collections = {};
    /* Data Models*/

    window.models.Article = Backbone.Model.extend({
      idAttribute: 'title'
    });
    window.collections.Articles = Backbone.Collection.extend({
      model: models.Article,
      initialize: function(opts) {
        if ((opts != null) && opts.parent_map) {
          this.parent_map = opts.parent_map;
        }
        this._byTitle = {};
        return this;
      },
      filterByDate: function(lodate, hidate) {
        var inrange, outrange, self;
        self = this;
        inrange = [];
        outrange = [];
        _.each(this.models, function(article) {
          var date, marker;
          date = article.get("date");
          if (date instanceof Date === false) {
            date = new Date(date);
          }
          marker = article.marker;
          if (marker != null) {
            if (date < hidate && date > lodate) {
              return inrange.push(marker);
            } else {
              return outrange.push(marker);
            }
          }
        });
        return {
          inrange: inrange,
          outrange: outrange
        };
      }
    });
    window.models.StoryMap = Backbone.Model.extend({
      defaults: function() {
        var articles;
        articles = new collections.Articles;
        articles.parent_map = this;
        return {
          markers: [],
          articles: articles
        };
      },
      external_url: '/externalNews',
      initialize: function() {
        return _.bindAll(this, "attachCoordinates", "getCalaisData", "getGoogleNews", "getYahooNews", "addArticle", "plot");
      },
      checkExistingQuery: function(query, callback) {
        return callback(query);
      },
      format: function(article, map) {
        _.each(map, function(val, key) {
          if (typeof val !== "function") {
            return article[key] = article[val];
          } else {
            return article[key] = val.call(this);
          }
        });
        return article;
      },
      addArticle: function(story, opts) {
        var articles, options;
        articles = this.get("articles");
        if (!articles._byId.hasOwnProperty(story.title)) {
          options = _.extend({}, opts);
          articles.add(new models.Article(this.format(story, options.map)), options);
        }
        return this;
      },
      getGoogleNews: function(query, start, done) {
        var obj, self;
        if (query == null) {
          return false;
        }
        self = this;
        $.get(this.external_url, obj = {
          source: 'google',
          q: encodeURIComponent(query.toLowerCase()),
          start: start
        }, function(data) {
          var json;
          json = JSON.parse(data);
          if (json.responseDetails === "out of range start") {
            if (done != null) {
              done(query, 0, null);
            }
            return false;
          }
          _.each(json.responseData.results, function(story) {
            return self.addArticle(story, {
              map: {
                date: 'publishedDate'
              }
            });
          });
          return self.getGoogleNews(query, start + 32, done);
        });
        return this;
      },
      getYahooNews: function(query, start, done) {
        var self;
        if (query == null) {
          return false;
        }
        self = this;
        $.get(this.external_url, {
          source: 'yahoo',
          q: encodeURIComponent(query.toLowerCase()),
          start: start
        }, function(data) {
          var response, stories;
          response = JSON.parse(data);
          if ((response != null) && (response.bossresponse != null) && (response.bossresponse.news != null)) {
            stories = response.bossresponse.news.results;
          }
          if (!(stories == null)) {
            _.each(stories, function(story) {
              console.log(story);
              return self.addArticle(story, {
                map: {
                  content: 'abstract',
                  date: function() {
                    return new Date(parseInt(story.date));
                  }
                }
              });
            });
            if (start <= 1000) {
              return self.getYahooNews(query, start + 50, done);
            } else if (done != null) {
              return done(query, 0, null);
            }
          } else if (done != null) {
            return done(query, 0, null);
          }
        });
        return this;
      },
      getCalaisData: function(story, story_string, callback) {
        var self;
        self = this;
        $.get("/calais", {
          content: story_string
        }, function(calaisjson) {
          cc("calais return");
          if (!(calaisjson == null)) {
            _.each(calaisjson.entities, function(entity) {
              var breakval;
              if (entity.hasOwnProperty("resolutions")) {
                breakval = true;
                _.each(entity.resolutions, function(coords) {
                  if ((coords.latitude != null) && (coords.longitude != null)) {
                    cc("coords found");
                    callback(story, {
                      latitude: coords.latitude,
                      longitude: coords.longitude
                    });
                    return breakval = false;
                  }
                  return true;
                });
                return breakval;
              }
            });
          }
        });
        return this;
      },
      attachCoordinates: function(article, coords) {
        if (article instanceof models.Article === false) {
          article = this.get("articles")._byId[article.title];
        }
        console.log(coords);
        console.log(article);
        _.extend(article.attributes, coords);
        return article;
      },
      plot: function(article) {
        cc("plotting");
        this.get("map").plot(article);
        return this;
      }
    });
    return window.collections.Maps = Backbone.Collection.extend({
      url: 'maps.json',
      model: models.StoryMap
    });
  });

}).call(this);
