// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    _.extend(Backbone.Collection, {
      save: function(options) {
        return Backbone.sync("create", this, options);
      }
    });
    /* Data Models*/

    window.models.Query = Backbone.Model.extend({
      url: function() {
        return "/queries/" + (this.get("id") || this.get("title"));
      },
      external_url: '/externalNews',
      initialize: function(attrs, options) {
        _.bindAll(this, "getYahooNews", "getGoogleNews", "exists", "addStory");
        this.map = window.mapObj;
        try {
          return this.get("stories").parent_map = options.map;
        } catch (_error) {}
      },
      defaults: function() {
        return {
          stories: new collections.Stories
        };
      },
      parse: function(model) {
        var obj, stories;
        if (model.query != null) {
          obj = model.query;
        } else {
          obj = model;
        }
        this.value = obj.title;
        this.tokens = [obj.title];
        stories = new collections.Stories();
        _.each(obj.stories, function(story) {
          return stories.add(new models.Story(story, {
            parse: true
          }));
        });
        obj.stories = stories;
        if (obj.created != null) {
          obj.created = new Date(obj.created);
        }
        if (obj.last_query != null) {
          obj.last_query = new Date(obj.last_query);
        }
        return obj;
      },
      exists: function(exists_callback, fails_callback) {
        var querytitle, self;
        querytitle = this.get("title");
        self = this;
        $.get("/queries/" + querytitle, {}, function(response) {
          try {
            response = JSON.parse(response);
          } catch (_error) {}
          cc(response);
          if (response.exists !== false && (exists_callback != null)) {
            self.id = response.id;
            self.set("id", response.id);
            console.log(self);
            return exists_callback(querytitle);
          } else if (fails_callback != null) {
            return fails_callback(self, new models.Query(response, {
              parse: true
            }));
          }
        });
        return this;
      },
      favorite: function() {
        var query_id, user_id;
        user.get("queries").add(this);
        user_id = window.user.id;
        query_id = this.id || this.get("id");
        return $.post("/favorite", {
          user_id: user_id,
          query_id: query_id
        }, function(resp) {
          resp = JSON.parse(resp);
          cc(resp);
          return cc("THIS MAP HAS BEEN FAVORITED");
        });
      },
      addStory: function(story) {
        var id, stories, title;
        stories = this.get("stories");
        story.date = new Date(story.date);
        console.log(story);
        try {
          title = story.title.toLowerCase().stripHTML();
        } catch (_error) {
          title = "This story didn't have a title.";
        }
        if (!stories._byTitle.hasOwnProperty(title)) {
          stories.add(story = new models.Story(story));
          id = this.get("id") || this.id;
          if (id) {
            story.set("query_id", id);
          }
          story.plot();
        } else {
          cc("story exists");
        }
        return this;
      },
      analyze: function() {
        var coll;
        coll = this.get("stories").models;
        cc("analyzings");
        cc(coll);
        return $.ajax({
          url: '/analyze',
          type: 'POST',
          dataType: 'json',
          data: {
            stories: JSON.stringify(coll)
          }
        }).done(function(resp) {
          console.log("success");
          return console.log(resp);
        }).fail(function() {
          return console.log("error");
        }).always(function() {
          return console.log("complete");
        });
      },
      getGoogleNews: function(start, done) {
        var query, self;
        cc("calling gnews");
        self = this;
        query = this.get("title");
        start || (start = 0);
        try {
          $.get(this.external_url, {
            source: 'google',
            q: query.toLowerCase(),
            start: start
          }, function(stories) {
            console.count("google news story set returned");
            console.log(stories);
            stories = JSON.parse(stories);
            if ((start > 64 || !stories.length) && (done != null)) {
              done(0, null);
            }
            _.each(stories, self.addStory);
            if (start < 64) {
              return self.getGoogleNews(start + 8, done);
            }
          });
        } catch (_error) {
          console.log(_error);
          console.log("timeout error on heroku, restart google query");
          this.getGoogleNews(start, done);
        }
        return done;
      },
      getYahooNews: function(start, done) {
        var query, self;
        query = '"' + this.get("title").toLowerCase() + '"';
        start || (start = 0);
        self = this;
        $.get(this.external_url, {
          source: 'yahoo',
          q: query,
          start: start
        }, function(stories) {
          var total;
          stories = JSON.parse(stories);
          console.count("yahoo news story set returned");
          total = 10;
          _.each(stories, self.addStory);
          if (start <= total) {
            self.getYahooNews(start + 50, done);
          } else if (done != null) {
            done(0, null);
          }
          return this;
        });
        return done;
      },
      getFeedZilla: function(done) {
        var self;
        self = this;
        $.get(this.external_url, {
          q: this.get("title"),
          source: 'feedzilla'
        }, function(stories) {
          cc("done with feedzilla, calling next");
          console.log("done fn is ", done);
          _.each(stories, self.addStory);
          if (done != null) {
            return done(0, null);
          }
        });
        return done;
      }
    });
    window.collections.Queries = Backbone.Collection.extend({
      model: models.Query,
      url: "/queries",
      parse: function(response) {
        return response.queries;
      }
    });
    window.models.Story = Backbone.Model.extend({
      url: function() {
        var url;
        url = "/stories";
        if (this.id) {
          url += "/" + this.id;
        }
        return url;
      },
      geocodeUrl: 'http://maps.googleapis.com/maps/api/geocode/json?sensor=true&address=',
      loading: false,
      defaults: {
        hasLoaded: false
      },
      parse: function(story) {
        if (story.location) {
          story.location = story.location.split(",").join(", ");
        }
        return story;
      },
      initialize: function() {
        _.bindAll(this, "geocode");
        return this.on({
          "loading": function() {
            return this.loading = true;
          },
          "doneloading": function() {
            return this.loading = false;
          },
          "change:hasLocation": function(model, value) {
            if (value === true) {
              return this.collection._withLocation[this.get("title")] = this;
            }
          }
        });
      },
      hasLocation: function() {
        return (this.get("lat") != null) && this.get("lng");
      },
      plot: function() {
        window.mapObj.plot(this);
        return this;
      },
      geocode: function(address, callbacks) {
        $.getJSON(this.geocodeUrl + encodeURIComponent(address), function(response) {
          var coords;
          try {
            coords = response.results;
            if (callbacks.success != null) {
              return callbacks.success(coords);
            }
          } catch (_error) {
            if (callbacks.error != null) {
              return callback.error(_error);
            }
          }
        });
        return this;
      }
    });
    return window.collections.Stories = (function() {
      var SaveWrap, sortMethods;
      sortMethods = {
        "newest": function(story) {
          return story.get("date");
        },
        "oldest": function() {
          return -story.get("date");
        }
      };
      SaveWrap = Backbone.Model.extend({
        url: '/stories/many',
        toJSON: function() {
          return this.get("models");
        }
      });
      return Backbone.Collection.extend({
        model: models.Story,
        _byTitle: {},
        _withLocation: {},
        _byDate: {},
        initialize: function(opts) {
          if ((opts != null) && opts.parent_map) {
            this.parent_map = opts.parent_map;
          }
          this._byTitle = {};
          this.on("add", function(story) {
            this._byTitle[story.get("title")] = story;
            return this._byDate[new Date(story.get("date")).toString()] = story;
          });
          return this;
        },
        filterByDate: function(lodate, hidate) {
          var inrange, outrange;
          inrange = [];
          outrange = [];
          _.each(this.models, function(story) {
            var date, marker, markerObj;
            if (story.filteredout) {
              return true;
            }
            date = story.get("date");
            if (date instanceof Date === false) {
              story.set("date", new Date(date));
            }
            markerObj = story.marker;
            if (markerObj != null) {
              marker = markerObj.marker;
              if (date < hidate && date > lodate) {
                return inrange.push(marker);
              } else {
                return outrange.push(marker);
              }
            }
          });
          return {
            inrange: inrange,
            outrange: outrange
          };
        },
        save: function(callbacks) {
          var wrapper;
          wrapper = new SaveWrap({
            models: this.models
          });
          return wrapper.save(null, callbacks);
        }
      });
    })();
  });

}).call(this);
