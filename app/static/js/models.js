// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    window.models = {};
    window.collections = {};
    /* Data Models*/

    window.models.Article = Backbone.Model.extend();
    window.collections.Articles = Backbone.Collection.extend({
      model: models.Article,
      initialize: function(opts) {
        if ((opts != null) && opts.parent_map) {
          this.parent_map = opts.parent_map;
        }
        this._byTitle = {};
        return this;
      },
      filterByDate: function(lodate, hidate) {
        var inrange, outrange, self;
        self = this;
        inrange = [];
        outrange = [];
        _.each(this.models, function(article) {
          var date, marker;
          date = article.get("date").getTime();
          marker = article.get("marker");
          if (marker != null) {
            if (date < hidate && date > lodate) {
              return inrange.push(marker);
            } else {
              return outrange.push(marker);
            }
          }
        });
        return {
          inrange: inrange,
          outrange: outrange
        };
      }
    });
    window.models.StoryMap = Backbone.Model.extend({
      defaults: function() {
        var articles;
        articles = new collections.Articles;
        articles.parent_map = this;
        return {
          markers: [],
          articles: articles
        };
      },
      initialize: function() {
        return _.bindAll(this, "formCalaisAndPlot", "getCalaisData", "getGoogleNews", "getYahooNews");
      },
      getGoogleNews: function(query, start, done) {
        var self;
        if (query == null) {
          return false;
        }
        self = this;
        $.get("/googleNews", {
          q: query.toLowerCase(),
          start: start
        }, function(data) {
          var json;
          json = JSON.parse(data);
          if (json.responseDetails === "out of range start") {
            if (done != null) {
              done(query, 0, null);
            }
            return false;
          }
          _.each(json.responseData.results, function(story) {
            story.date = story.publishedDate;
            return self.getCalaisData(story, story.titleNoFormatting + story.content, self.formCalaisAndPlot);
          });
          return self.getGoogleNews(query, start + 32, done);
        });
        return this;
      },
      getYahooNews: function(query, start, done) {
        var self;
        if (query == null) {
          return false;
        }
        self = this;
        $.get("/yahooNews", {
          q: query.toLowerCase(),
          start: start
        }, function(data) {
          var response, stories;
          response = JSON.parse(data);
          if ((response != null) && (response.bossresponse != null) && (response.bossresponse.news != null)) {
            stories = response.bossresponse.news.results;
          }
          if (!(stories == null)) {
            _.each(stories, function(story) {
              return self.getCalaisData(story, story.title + story.abstract, self.formCalaisAndPlot);
            });
            if (start <= 1000) {
              return self.getYahooNews(query, start + 50, done);
            } else if (done != null) {
              return done(query, 0, null);
            }
          } else if (done != null) {
            return done(query, 0, null);
          }
        });
        return this;
      },
      getCalaisData: function(story, story_string, callback) {
        var self;
        self = this;
        $.get("/calais", {
          content: story_string
        }, function(data) {
          var calaisjson, i;
          cc("returning from calais");
          calaisjson = JSON.parse(data);
          if (calaisjson == null) {
            return;
          }
          for (i in calaisjson) {
            if (calaisjson[i].hasOwnProperty("resolutions")) {
              callback(story, calaisjson, i);
              break;
            }
          }
        });
        return this;
      },
      formCalaisAndPlot: function(fullstory, calaisjson, i) {
        var article, calaisObj;
        calaisObj = _.extend({}, fullstory);
        cc(fullstory);
        calaisObj.latitude = calaisjson[i].resolutions[0].latitude;
        calaisObj.longitude = calaisjson[i].resolutions[0].longitude;
        calaisObj.date = new Date(calaisjson[i].date);
        this.get("articles").add(article = new models.Article(calaisObj));
        this.get("map").plotStory(article);
        return this;
      }
    });
    return window.collections.Maps = Backbone.Collection.extend({
      url: 'maps.json',
      model: models.StoryMap
    });
  });

}).call(this);
