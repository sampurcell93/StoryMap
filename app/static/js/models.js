// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    /* Data Models*/

    window.models.Query = Backbone.Model.extend({
      parse: function(model) {
        this.value = model.title;
        this.tokens = [model.title];
        return model;
      }
    });
    window.collections.Queries = Backbone.Collection.extend({
      model: models.Query,
      url: "/queries",
      parse: function(response) {
        return response.queries;
      }
    });
    window.models.Article = Backbone.Model.extend({
      idAttribute: 'title',
      loading: false,
      defaults: {
        hasLoaded: false
      },
      initialize: function() {
        return this.on({
          "loading": function() {
            return this.loading = true;
          },
          "doneloading": function() {
            return this.loading = false;
          }
        });
      },
      attach: function(objects, plot) {
        var self;
        self = this;
        this.trigger("loading");
        _.each(objects, function(obj) {
          var applyfun, i;
          applyfun = obj.applyfun;
          if (applyfun != null) {
            for (i in obj) {
              cc(i);
              if (obj[i] !== applyfun) {
                obj[i] = applyfun.apply(self, [obj[i]]);
              }
            }
          }
          true;
          return _.extend(self.attributes, obj);
        });
        if (plot === true) {
          console.log("plotting");
          this.collection.parent_map.get("map").plot(this);
        }
        return this;
      },
      getCalaisData: function(callback) {
        var j, self, story_string;
        self = this;
        try {
          j = this.toJSON();
          story_string = j.title + j.content;
        } catch (_error) {
          return console.error("Badly formatted model passed to calais");
        }
        $.get("/calais", {
          content: story_string
        }, function(calaisjson) {
          if (!(calaisjson == null)) {
            console.count("calais data returned for " + j.title);
            return self.parseCalais(calaisjson, {
              plot: true
            });
          }
        });
        return this;
      },
      parseCalais: function(json, opts) {
        var options, self;
        options = _.extend({
          plot: true
        }, opts);
        self = this;
        return _.each(json.entities, function(entity) {
          var breakval;
          if (entity.hasOwnProperty("resolutions")) {
            breakval = true;
            _.each(entity.resolutions, function(coords) {
              if ((coords.latitude != null) && (coords.longitude != null)) {
                self.attach([
                  {
                    applyfun: parseFloat,
                    latitude: coords.latitude,
                    longitude: coords.longitude
                  }
                ], options.plot);
                self.set("hasLocation", true);
                return breakval = false;
              }
              return true;
            });
            return breakval;
          }
        });
      }
    });
    (function() {
      var sortMethods;
      sortMethods = {
        "newest": function(article) {
          return article.get("date");
        },
        "oldest": function() {
          return -article.get("date");
        }
      };
      return window.collections.Articles = Backbone.Collection.extend({
        model: models.Article,
        _byTitle: {},
        initialize: function(opts) {
          if ((opts != null) && opts.parent_map) {
            this.parent_map = opts.parent_map;
          }
          this._byTitle = {};
          return this;
        },
        filterByDate: function(lodate, hidate) {
          var inrange, outrange, self;
          self = this;
          inrange = [];
          outrange = [];
          _.each(this.models, function(article) {
            var date, marker;
            date = article.get("date");
            if (date instanceof Date === false) {
              article.set("date", new Date(date));
            }
            marker = article.marker;
            if (marker != null) {
              if (date < hidate && date > lodate) {
                return inrange.push(marker);
              } else {
                return outrange.push(marker);
              }
            }
          });
          return {
            inrange: inrange,
            outrange: outrange
          };
        }
      });
    })();
    window.models.StoryMap = Backbone.Model.extend({
      saved: false,
      defaults: function() {
        var articles;
        articles = new collections.Articles;
        articles.parent_map = this;
        return {
          articles: articles
        };
      },
      external_url: '/externalNews',
      initialize: function() {
        return _.bindAll(this, "getGoogleNews", "getYahooNews", "addArticle", "plot");
      },
      checkExistingQuery: function(query, callback) {
        return callback(query);
      },
      format: function(article, map) {
        _.each(map, function(val, key) {
          if (typeof val !== "function") {
            return article[key] = article[val];
          } else {
            return article[key] = val.call(article);
          }
        });
        return article;
      },
      addArticle: function(story, opts) {
        var article, articles, options, title;
        articles = this.get("articles");
        title = story.title.toLowerCase().stripHTML();
        if (!articles._byTitle.hasOwnProperty(title)) {
          options = _.extend({}, opts);
          articles.add(article = new models.Article(this.format(story, options.map)), options);
          articles._byTitle[title] = article;
        } else {
          cc("story exists");
        }
        return this;
      },
      getGoogleNews: function(query, start, done) {
        var self;
        if (query == null) {
          return false;
        }
        self = this;
        start || (start = 0);
        $.get(this.external_url, {
          source: 'google',
          q: query.toLowerCase(),
          start: start
        }, function(response) {
          try {
            console.count("google news story set returned");
            response = JSON.parse(response);
            if (response.responseDetails === "out of range start" || start > 64) {
              if (done != null) {
                return done(query, 0, null);
              }
            }
            _.each(response.responseData.results, function(story) {
              return self.addArticle(story, {
                map: {
                  date: 'publishedDate',
                  type: function() {
                    return 'google';
                  }
                }
              });
            });
          } catch (_error) {
            console.error("Bad google response");
          }
          if (start < 64) {
            return self.getGoogleNews(query, start + 32, done);
          }
        });
        return this;
      },
      getYahooNews: function(query, start, done) {
        var self;
        if (query == null) {
          return false;
        }
        query = '"' + query.toLowerCase() + '"';
        start || (start = 0);
        self = this;
        $.get(this.external_url, {
          source: 'yahoo',
          q: query,
          start: start
        }, function(response) {
          var news, stories, total;
          response = JSON.parse(response);
          try {
            console.count("yahoo news story set returned");
            news = response.bossresponse.news;
            stories = news.results;
            total = news.totalresults || 1000;
            _.each(stories, function(story) {
              return self.addArticle(story, {
                map: {
                  content: 'abstract',
                  date: function() {
                    return new Date(parseInt(story.date) * 1000);
                  },
                  type: function() {
                    return 'yahoo';
                  }
                }
              });
            });
            if (start <= total) {
              return self.getYahooNews(query, start + 50, done);
            } else if (done != null) {
              return done(query, 0, null);
            }
          } catch (_error) {
            if (done != null) {
              return done(query, 0, null);
            }
          }
        });
        return this;
      },
      plot: function(article) {
        this.get("map").plot(article);
        return this;
      }
    });
    return window.collections.Maps = Backbone.Collection.extend({
      url: 'maps.json',
      model: models.StoryMap
    });
  });

}).call(this);
